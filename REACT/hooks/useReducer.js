//useReducer

/* Disparamos uma action e uma
fun√ß√£o reducer faz a altera√ß√£o no estado baseado no tipo de action que foi
disparada. 

Normalmente utilizamos este hook em duas situa√ß√µes: quando nosso c√≥digo tem
uma l√≥gica muito complexa e precisa alterar v√°rios estados ao mesmo tempo, ou
quando precisamos que o estado de um componente seja alterado a partir de um
filho que est√° em n√≠veis muito baixos. Neste caso, normalmente n√≥s enviar√≠amos
uma fun√ß√£o de callback via props componente por componente at√© chegar onde
gostar√≠amos (prop drilling), para ent√£o, neste componente, executar a fun√ß√£o de
callback e desencadear as altera√ß√µes no estado de seu pai. Por√©m, com o
useReducer, temos um ganho de performance (pequeno, mas existe) quando
enviamos a fun√ß√£o dispatch via Context ao inv√©s de um callback via props.

A fun√ß√£o useReducer, assim como o useState, retorna um array com duas
posi√ß√µes: na primeira o state e na segunda a fun√ß√£o dispatch, que ser√° a
respons√°vel por disparar as actions.
*/

import React, {useReducer} from "react"; 

const initialState = 1; /*üîµ*/

function initializer(initialValue) {  
  return { count: initialValue}
} /*üî¥*/

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return {count: state.count + 1}
    case 'decrement':
      return {count: state.count - 1}
    default:
      throw new Error('Invalid action type')
  }
} /*üü¢*/

function App() {
  const [state /*‚ö™*/, dispatch /*üü£*/] = useReducer(reducer, initialState, initializer)

  return (
    <div>
      <h1>Valor atual: {state.count}</h1>
      <button onClick={() => /*üü†*/dispatch({ type: 'increment'})}> + </button>
      <button onClick={() => /*üü†*/dispatch({ type: 'decrement'})}> - </button>
    </div>
  )
}

/*üîµ
  VALOR INICIAL DO STATE
*/

/*üî¥
  FUN√á√ÉO QUE SER√Å EXECUTADA NO PRIMEIRO RENDER, RECEBER√Å O VALOR DE INITIALSTATE COMO AGUMENTO E O RETORNO DESTA FUN√á√ÉO SER√Å O ESTADO INICIAL DO REDUCER
*/

/*üü¢
  FUN√á√ÉO REDUCER √â QUEM SER√Å EXECUTADA QUANDO A FUN√á√ÉO DISPATCH FOR INVOCADA, ELA RECEBE COMO ARGUMENTO O (STATE) ATUAL E A (ACTION) - VALOR QUE FOI ENVIADO DENTRO DA FUN√á√ÉO DISPATCH QUANDO INVOCADA
*/

/*‚ö™
  STATE √â O ESTADO QUE SEMPRE QUE MUDAR... RE-RENDER
*/

/*üü£
  FUN√á√ÉO DISPATCH: RECEBE UM OBJETO E FAZ A FUN√á√ÉO REDUCER SER EXECUTADA, ATUALIZA O STATE E CONSEQUENTEMENTE FAZ UM RE-RENDER NO COMPONENTE
*/

/*üü†
  CHAMADA DA FUN√á√ÉO DISPATCH
*/